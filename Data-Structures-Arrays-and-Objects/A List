function arrayToList(array){
  var list = null;
  for(var i = array.length - 1; i >= 0; i--){
    list = {value : array[i], rest : list};
  }
  return list;
}

function listToArray(list){
  array = [];
  for(var node = list; node;node = node.rest){
   array.push(node.value);
  }
  return array;
}

function prepend(elementToAdd, list){
  return list = {value : elementToAdd, rest : list};
}

function nth(list, nPosition){
 var counter = 0;
 for(var node = list; node; node = node.rest){
   if (counter == nPosition)
     return node.value;
   else 
     counter++;
 }
}

//Recursive function call.
/* function nth(list, n) {
  if (!list)                      //Always need a base case to check for closure.
    return undefined;
  else if (n == 0)
    return list.value;
  else
    return nth(list.rest, n - 1); //key thing to this function is list.rest
} */

console.log(arrayToList([10, 20]));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(listToArray(arrayToList([10, 20, 30])));
// → [10, 20, 30]
console.log(prepend(10, prepend(20, null)));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(nth(arrayToList([10, 20, 30]), 1));
// → 20
